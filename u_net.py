# -*- coding: utf-8 -*-
"""U-Net.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XxvLvFWqqQCwegj3JGAlaORj26szQfuX
"""

class U_Net(torch.nn.Module):
    def __init__(self):
        super(U_Net, self).__init__()
        self.MaxPool = torch.nn.MaxPool2d(kernel_size = (2,2), stride = 2)
        self.UpSample = torch.nn.UpsamplingNearest2d(scale_factor = 2)
        self.downLayer1 = torch.nn.Sequential(
            torch.nn.Conv2d(1, 64, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.Conv2d(64, 64, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.BatchNorm2d(64)
        )
        self.downLayer2 = torch.nn.Sequential(
            torch.nn.Conv2d(64, 128, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.Conv2d(128, 128, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.BatchNorm2d(128)
        )
        self.downLayer3 = torch.nn.Sequential(
            torch.nn.Conv2d(128, 256, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.Conv2d(256, 256, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.BatchNorm2d(256)
        )
        
        self.downLayer4 = torch.nn.Sequential(
            torch.nn.Conv2d(256, 512, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.Conv2d(512, 512, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.BatchNorm2d(512)
        )
        
        self.upLayer1 = torch.nn.Sequential(
            torch.nn.Conv2d(512, 1024, kernel_size = (3,3), stride = 1, padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.Conv2d(1024, 1024, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.BatchNorm2d(1024)
        )
        self.upLayer2 = torch.nn.Sequential(
            torch.nn.Conv2d(1536, 512, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.Conv2d(512, 512, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.BatchNorm2d(512)
        )
        self.upLayer3 = torch.nn.Sequential(
            torch.nn.Conv2d(768, 256, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.Conv2d(256, 256, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.BatchNorm2d(256)
        )
        self.upLayer4 = torch.nn.Sequential(
            torch.nn.Conv2d(384, 128, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.Conv2d(128, 128, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.BatchNorm2d(128)
        )
        self.upLayer5 = torch.nn.Sequential(
            torch.nn.Conv2d(192, 64, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.Conv2d(64, 64, kernel_size = (3,3), stride = 1,padding = (1,1)),
            torch.nn.ReLU(),
            torch.nn.BatchNorm2d(64)
        )
        self.createMask = torch.nn.Conv2d(64,4,kernel_size = (3,3),stride = 1,padding = (1,1))
        
     
    def forward(self, x):
        down_x1 = x
        for layer in self.downLayer1:
            down_x1 = layer(down_x1);
        
        down_x2 = self.MaxPool(down_x1)
        for layer in self.downLayer2:
            down_x2 = layer(down_x2)
        
        down_x3 = self.MaxPool(down_x2)
        for layer in self.downLayer3:
            down_x3 = layer(down_x3)
        
        down_x4 = self.MaxPool(down_x3)
        for layer in self.downLayer4:
            down_x4 = layer(down_x4)
        
        result = self.MaxPool(down_x4)
        for layer in self.upLayer1:
            result = layer(result)
        
        result = self.UpSample(result)
        result = torch.cat((result, down_x4), dim=1)
        for layer in self.upLayer2:
            result = layer(result)
            
        result = self.UpSample(result)
        result = torch.cat((result, down_x3), dim=1)
        for layer in self.upLayer3:
            result = layer(result)
        
        result = self.UpSample(result)
        result = torch.cat((result, down_x2), dim=1)
        for layer in self.upLayer4:
            result = layer(result)
        
        result = self.UpSample(result)
        result = torch.cat((result, down_x1), dim=1)
        for layer in self.upLayer5:
            result = layer(result)
            
        result = self.createMask(result)
        return result

